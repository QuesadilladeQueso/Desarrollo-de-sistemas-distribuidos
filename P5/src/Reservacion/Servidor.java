/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Reservacion;

import java.sql.*;
import java.io.*;
import java.net.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author JManuel
 */
public class Servidor extends javax.swing.JFrame {

    //Valores de los diferentes comandos
    public final static int NUEVA_CONEXION = 0, RELOJ = 1, NUEVO_RELOJ = 2, PEDIR_LIBRO = 3,REINICIAR_SESION = 4,DETENER_RELOJ = 5, REANUDAR_RELOJ = 6;
    
    private DatagramSocket socketCliente; //socket cliente del servidor reloj
    private ServerSocket servidorLibros; //socket servidor de libros
    private DatagramSocket servidorRespaldo;//socket servidor de respaldo
    private Socket usuarioSocket; //socket del usuario libros
    private InetAddress ipServidorReloj;//ip del servidor reloj
    private InetAddress ipServidorRespaldo; //ip del servidor de respaldo
    private final int PUERTORELOJ = 5000;//puerto del servidor reloj
    private int puertoLibros = 5002; //puerto donde escuchamos peticiones de libros
    private int puertoRespaldo = 5003; //puerto del servidor de respaldo
    private Connection conexion;
    private int idSesion;
    private Clock relojLocal;
    //Aqui se pone false el main server cuando es el servidor secudario
    private boolean mainServer = true,backup= false,notificarReinicio = false;
    private ArrayList<Equipo> usuarios;
    
    private String sReloj = "25.8.4.19",sRespaldo = "25.4.105.71";

    public int getIdSesion() {
        return idSesion;
    }

    public Clock getRelojLocal() {
        return relojLocal;
    }
    
    
    /**
     * Creates new form Servidor
     */
    public Servidor() {
        initComponents();
        try {
            //Iniciamos conexion con la base de datos
            CargarDriver();
            conexion = DriverManager.getConnection("jdbc:mysql://localhost/libros?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","root" ,"1234");
            System.out.println("Conectado a la base de datos");
        } catch (SQLException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            System.out.println(puertoLibros);
            socketCliente = new DatagramSocket();//Socket cliente de servidorreloj
            servidorLibros = new ServerSocket(puertoLibros);//Socket servidor de libros
            if(!mainServer)//Si no es el servidor principal
                servidorRespaldo = new DatagramSocket(); //creamos socket para enviar al servidor main
            else
                servidorRespaldo = new DatagramSocket(puertoRespaldo);//creamos socket para escuchar al servidor respaldo
            ipServidorReloj = InetAddress.getByName(sReloj); //asignamos la direccion del servidorreloj
            ipServidorRespaldo = InetAddress.getByName(sRespaldo); //asignamos direccion del servidor de respaldo
        } catch (SocketException | UnknownHostException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
        usuarios = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        portadaLibro = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        labelReloj = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        labelNombreServidor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        portadaLibro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        portadaLibro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Portadas/no-image.png"))); // NOI18N

        labelReloj.setBackground(new java.awt.Color(153, 153, 255));
        labelReloj.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        labelReloj.setForeground(new java.awt.Color(255, 255, 255));
        labelReloj.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelReloj.setText("00:00:00");
        labelReloj.setOpaque(true);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton1.setText("Reiniciar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        labelNombreServidor.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        labelNombreServidor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNombreServidor.setText("Servidor");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelReloj, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(portadaLibro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelNombreServidor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelNombreServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(portadaLibro, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelReloj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //Creamos reloj del servidor//
        LocalDateTime now = LocalDateTime.now();
        relojLocal = new Clock(now.getHour(),now.getMinute(),now.getSecond()-10,labelReloj);
        relojLocal.start();
        //Termino crear reloj//
        //Creamos nueva sesion en la base de datos//
        CrearSesion();
        //Sesion creada//
        
        //Iniciando conexion al servidor reloj//
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        DataOutputStream output = new DataOutputStream(baos);
        try {
            System.out.println("Solicitando conexion a servidor reloj");
            output.writeInt(NUEVA_CONEXION);//tipo de comando
            output.flush();
            output.writeUTF("Servidor");//nombre del servidor
            output.writeUTF(relojLocal.GetHoraLocal());//reloj actual
            output.flush();
            byte[] b = baos.toByteArray();//convertimos el stream a bytes
            //creamos paquete con los datos en bytes
            DatagramPacket paquete = new DatagramPacket(b,b.length,ipServidorReloj,PUERTORELOJ);
            //enviamos el paquete
            socketCliente.send(paquete);
            System.out.println("Hora enviada al servidor reloj");
        } catch (IOException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
        //se inicio conexion con el servidor reloj//
        
        //Si no somos el servidor principal nos anunciamos al servidor principal//
        if(!mainServer){
            try {
                baos = new ByteArrayOutputStream();
                output = new DataOutputStream(baos);
                System.out.println("Realizando conexion a servidor de respaldo");
                output.writeInt(NUEVA_CONEXION);
                output.flush();
                byte[] b = baos.toByteArray();
                DatagramPacket paquete = new DatagramPacket(b,b.length,ipServidorRespaldo,puertoRespaldo);
                servidorRespaldo.send(paquete);
                System.out.println("Peticion enviada");
            } catch (IOException ex) {
                Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //////////////////////////////////////////////////////////////////////////
        
        //Creamos hilo para peticiones del servidor respaldo/principal
        Thread hiloBackup = new Thread(() -> {
            while (true) {
                try {
                    byte[] b = new byte[1024];
                    DatagramPacket paquete = new DatagramPacket(b, b.length);
                    if (mainServer && !backup) {//si somos el servidor principal y aun no se anuncia el servidor de respaldo
                        System.out.println("Esperando al servidor de respaldo");
                        servidorRespaldo.receive(paquete);//esperamos paquete
                        DataInputStream input = new DataInputStream(new ByteArrayInputStream(paquete.getData()));
                        int comando = input.readInt();
                        if(comando == NUEVA_CONEXION){//verificamos que sea una peticion de conexion
                            System.out.println("Servidor respaldo escuchado");
                            backup = true;
                            ipServidorRespaldo = paquete.getAddress();
                            puertoRespaldo = paquete.getPort();
                        }
                    } else {
                        System.out.println("Esperando request de backup");
                        servidorRespaldo.receive(paquete);
                        System.out.println("Paquete recibido");
                        DataInputStream input = new DataInputStream(new ByteArrayInputStream(paquete.getData()));
                        String query = input.readUTF();
                        System.out.println("Query: " + query);
                        System.out.println("Ejecutando query");
                        Statement s = conexion.createStatement();
                        s.executeUpdate(query);
                        System.out.println("Query ejecutado");
                        s.close();

                    }
                } catch (IOException | SQLException ex) {
                    Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        hiloBackup.start();
        //Creamos hilo que espera peticiones del servidor reloj//
        Thread peticiones = new Thread(()->{
            while(true){
                try {
                    System.out.println("Esperando request");
                    byte[] b = new byte[1024];
                    ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
                    DataOutputStream output2 = new DataOutputStream(baos2);
                    DatagramPacket paquete = new DatagramPacket(b,b.length);
                    socketCliente.receive(paquete); //recibimos paquete
                    DataInputStream input = new DataInputStream(new ByteArrayInputStream(paquete.getData()));
                    int comando = input.readInt();//leemos el tipo de comando
                    switch (comando) {
                        case RELOJ:
                            //si es de tipo RELOJ
                            //Mandamos reloj en segundos
                            System.out.println("Enviando reloj: "+relojLocal);
                            output2.writeInt(relojLocal.ClockInSeconds());
                            output2.flush();
                            b = baos2.toByteArray();
                            DatagramPacket hora = new DatagramPacket(b,b.length,paquete.getAddress(),paquete.getPort());
                            socketCliente.send(hora); //enviamos hora
                            System.out.println("Hora enviada");
                            break;
                        case NUEVO_RELOJ:
                            //si es de tipo nuevo reloj
                            //Actualizamos el reloj del servidor
                            System.out.println("Actualizando reloj");
                            ActualizarReloj(input.readInt());//horaobtenida
                            break;
                        case DETENER_RELOJ:
                            System.out.println("Deteniendo Reloj");
                            relojLocal.Stop();
                            break;
                        case REANUDAR_RELOJ:
                            System.out.println("Reanudando reloj");
                            relojLocal.SetClockInSeconds(input.readInt());
                            relojLocal.Start();
                            System.out.println("Reloj ready");
                            break;
                        default:
                            break;
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
        peticiones.start();
        //Termino hilo peticiones servidor reloj//
        //Creamos hilo para la espera de peticiones de libros//
        Thread usuarioLibros = new Thread(()->{
            while(true){
                try {
                    System.out.println("Esperando solicitud de libro");
                    usuarioSocket = servidorLibros.accept();
                    System.out.println("Creando nuevo hilo para cliente");
                    //agregamos usuario en lista de usuarios
                    Equipo nuevoUsuario = new Equipo(GetLastIdUsuario(),//id
                            usuarioSocket.getPort(),//puerto
                            "Usuario "+usuarios.size(),//nombre
                            usuarioSocket.getInetAddress().getHostAddress(),//ip
                            relojLocal.ClockInSeconds());//reloj
                    usuarios.add(nuevoUsuario);
                    System.out.println("nombre:"+nuevoUsuario.getNombre()+" IP:"+nuevoUsuario.getIp());
                    //registramos usuario en la base de datos
                    RegistrarUsuario(nuevoUsuario.getNombre(),nuevoUsuario.getIp(),nuevoUsuario.getPuerto());
                    //Creamos hilo para atendier peticiones de libros
                    HiloUsuarioLibros hiloUsuario = new HiloUsuarioLibros(usuarioSocket,conexion,nuevoUsuario,portadaLibro,this);
                    hiloUsuario.start();
                    System.out.println("Termino crear hilo");
                } catch (IOException ex) {
                    Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        usuarioLibros.start();
        //Termino hilo en espera de usuarios para proover libros
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            //Terminamos la sesion//
            System.out.println("Cerrando");
            //indicamos hora de termino de sesion en la base de datos
            Statement sesion = conexion.createStatement();
            String query = "UPDATE sesion SET HoraTermino ='"+relojLocal.GetHoraLocal()+"' WHERE idSesion="+idSesion;
            sesion.executeUpdate(query);
            EnviarQuery(query);
            ReiniciarEstadoLibros();
            sesion.close();
        } catch (SQLException ex) {
            Logger.getLogger(ServidorReloj.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ReiniciarEstadoLibros();
        SetNotificarReinicio(true);
        portadaLibro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Portadas/no-image.png")));
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private String SegundosAHoras(int segundos){
        return (segundos/3600)+":"+((segundos%3600)/60)+":"+((segundos%3600)%60);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Servidor().setVisible(true);
        });
    }
    
    //Cargamos driver de msql
    private void CargarDriver(){
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println("Error al cargar el driver");
        }
    }
    
    private void ActualizarReloj(int hora){
        System.out.println("Actual: " + relojLocal + " Nueva: " + SegundosAHoras(hora));
        if (relojLocal.ClockInSeconds() <= hora) { //si la hora es mayor a la del servidor
            System.out.println("Sustituyendo hora");
            relojLocal.SetClockInSeconds(hora);//sustituimos por la nueva hora
        } else { //si la hora es menor a la del servidor
            int tiempoEspera = (relojLocal.ClockInSeconds() - hora) * 1000;
            System.out.println("Esperando " + tiempoEspera + " segundos");
            relojLocal.Esperar(tiempoEspera);
        }
    }
    
    //Crear una nueva sesion en la base de datos
    private void CrearSesion(){
        try {
            Statement stateSesion = conexion.createStatement();
            //creamos nuevo registro de sesion
            String query = "INSERT INTO sesion (HoraInicio) VALUES ('"+relojLocal.GetHoraLocal()+"')";
            stateSesion.executeUpdate(query);
            EnviarQuery(query);
            //obtenemos el id de la sesion que se acaba de crear
            ResultSet res = stateSesion.executeQuery("SELECT MAX(idSesion) FROM sesion");
            while(res.next())
                idSesion = res.getInt("MAX(idSesion)");
            res.close();
            stateSesion.close();
            System.out.println("Sesion "+idSesion+" creada");
        } catch (SQLException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //Reinicia todas las disponibilidades de los libros
    public void ReiniciarEstadoLibros(){
        try {
            Statement statement = conexion.createStatement();
            //reinicia disponilibidad en base de datos
            statement.executeUpdate("UPDATE libro SET Disponible = 1");
            EnviarQuery("UPDATE libro SET Disponible = 1");
            statement.close();
        } catch (SQLException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //Registra un nuevo usuario en la base de datos
    private void RegistrarUsuario(String nombre,String ip,int puerto){
        try {
            Statement s = conexion.createStatement();
            //creamos registro del usuario
            String query = "INSERT INTO usuario (Nombre,IP,Puerto) VALUES ('"+nombre+"','"+ip+"',"+puerto+")";
            s.executeUpdate(query);
            EnviarQuery(query);
            s.close();
        } catch (SQLException ex) {
            Logger.getLogger(HiloUsuarioLibros.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //Se obtiene el ultimo idUsuario
    private int GetLastIdUsuario(){
        try {
            Statement s = conexion.createStatement();
            ResultSet r = s.executeQuery("SELECT MAX(idUsuario) FROM usuario");
            r.next();
            int id = r.getInt("MAX(idUsuario)");
            r.close();
            s.close();
            return id+1;
        } catch (SQLException ex) {
            return -1;
        }
    }
    
    //Enviar query al servidor seleccionado
    public void EnviarQuery(String query){
        try {
            System.out.println("Enviando query");
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            DataOutputStream output = new DataOutputStream(baos);
            output.writeUTF(query);
            output.flush();
            byte[] b = baos.toByteArray();
            DatagramPacket paquete = new DatagramPacket(b,b.length,ipServidorRespaldo,puertoRespaldo);
            servidorRespaldo.send(paquete);
            System.out.println("Query enviado");
        } catch (IOException ex) {
            Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void SetNotificarReinicio(boolean value){
        notificarReinicio = value;
    }
    
    public boolean NotificarReinicio(){
        return notificarReinicio;
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelNombreServidor;
    private javax.swing.JLabel labelReloj;
    private javax.swing.JLabel portadaLibro;
    // End of variables declaration//GEN-END:variables
}
