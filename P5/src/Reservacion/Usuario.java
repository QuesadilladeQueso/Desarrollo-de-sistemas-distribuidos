/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Reservacion;

import java.io.*;
import java.net.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author JManuel
 */
public class Usuario extends javax.swing.JFrame {

    private Socket socketLibros;
    private DatagramSocket socketReloj;
    private DataInputStream inputLibro;
    private DataOutputStream outputLibro;
    private DefaultListModel modelLibros;
    private ArrayList<Libro> libros = new ArrayList<>();
    private int numLibros;
    final int PUERTO1 = 5002;//Puerto Servidor 1
    final int PUERTO2 = 5002;//Puerto Servidor 2
    final int PUERTO = 5000;//Puerto Servidor Reloj
    InetAddress ipServidorReloj,ipServidor1,ipServidor2;
    /**
     * Creates new form Usuario
     */
    public Usuario() {
        modelLibros = new DefaultListModel();
        numLibros = 0;
        initComponents();
        try {
            ipServidor1 = InetAddress.getByName("25.8.4.19");
            ipServidor2 = InetAddress.getByName("25.4.105.71");
            socketReloj = new DatagramSocket();//socket para sincronizar reloj
            ipServidorReloj = InetAddress.getByName("25.8.4.19");
        } catch (SocketException | UnknownHostException ex) {
            Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaLibros = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        labelTitulo = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        labelAutor = new javax.swing.JLabel();
        labelReloj = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("USUARIO");

        listaLibros.setModel(modelLibros);
        listaLibros.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaLibrosValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listaLibros);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton1.setText("Pedir Libro");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel1.setText("Titulo:");

        labelTitulo.setText("No hay libro");

        jLabel4.setText("Autor:");

        labelAutor.setText("No hay libro");

        labelReloj.setBackground(new java.awt.Color(153, 153, 255));
        labelReloj.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        labelReloj.setForeground(new java.awt.Color(255, 255, 255));
        labelReloj.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelReloj.setText("00:00:00");
        labelReloj.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelAutor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(labelReloj, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(labelTitulo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(labelAutor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelReloj, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listaLibrosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaLibrosValueChanged
        try{
        int index = listaLibros.getSelectedIndex();
            labelTitulo.setText(libros.get(index).getNombre());
            labelAutor.setText(libros.get(index).getAutor());
        } catch (java.lang.IndexOutOfBoundsException ex){
            labelTitulo.setText("No hay libro");
            labelAutor.setText("No hay libro");
        }
    }//GEN-LAST:event_listaLibrosValueChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //Hora local
        LocalDateTime now = LocalDateTime.now();
        Clock reloj = new Clock(now.getHour(),now.getMinute(),now.getSecond()-10,labelReloj);
        reloj.start();
        //Creamos paquete para conectarse al Servidor Reloj
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        DataOutputStream output = new DataOutputStream(baos);
        try {
            System.out.println("Solicitando conexion a servidor reloj");
            output.writeInt(Servidor.NUEVA_CONEXION); //tipo de peticion
            output.flush();
            output.writeUTF("Usuario"); //Nombre del usuario
            output.flush();
            output.writeUTF(reloj.GetHoraLocal());//reloj local
            output.flush();
            byte[] b = baos.toByteArray();
            //Creamos paquete de datos en bytes
            DatagramPacket paquete = new DatagramPacket(b,b.length,ipServidorReloj,PUERTO);
            socketReloj.send(paquete);//enviamos paquete
            System.out.println("Hora enviada al servidor reloj");
        } catch (IOException ex) {
            Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
        }
        ///terminamos conectar al servidor reloj//
        
        //Iniciamos conexion con servidores de libros//
        try {
            //Intentamos conectar al servidor de libros 1
            socketLibros = new Socket(ipServidor1,PUERTO1);
            System.out.println("Conectado al servidor 1");
            inputLibro = new DataInputStream(socketLibros.getInputStream());
            outputLibro = new DataOutputStream(socketLibros.getOutputStream());
        } catch (IOException ex) {
            System.out.println("Error al conectar con el servidor 1");
            try {
                socketLibros = new Socket(ipServidor2,PUERTO2);
                inputLibro = new DataInputStream(socketLibros.getInputStream());
                outputLibro = new DataOutputStream(socketLibros.getOutputStream());
            } catch (IOException ex1) {
                System.out.println("Error al conectar con clientes");
                System.exit(0);
            }
        }
        //Conexion establecida//
        
        //Hilo en espera de peticiones del servidor reloj
        Thread peticiones = new Thread(()->{
            while(true){
                try {
                    System.out.println("Esperando request de servidor reloj");
                    byte[] b = new byte[1024];
                    ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
                    DataOutputStream output2 = new DataOutputStream(baos2);
                    DatagramPacket paquete = new DatagramPacket(b,b.length);
                    socketReloj.receive(paquete);
                    DataInputStream input = new DataInputStream(new ByteArrayInputStream(paquete.getData()));
                    int comando = input.readInt();
                    switch (comando) {
                        case Servidor.RELOJ:
                            //si es de tipo RELOJ
                            //Mandamos reloj en segundos
                            System.out.println("Enviando reloj: "+reloj);
                            output2.writeInt(reloj.ClockInSeconds());
                            output2.flush();
                            b = baos2.toByteArray();
                            DatagramPacket hora = new DatagramPacket(b,b.length,paquete.getAddress(),paquete.getPort());
                            socketReloj.send(hora); //enviamos hora
                            System.out.println("Hora enviada");
                            break;
                        case Servidor.NUEVO_RELOJ:
                            //si es de tipo nuevo reloj
                            System.out.println("Actualizando reloj");
                            int horaRecibida = input.readInt();//horaobtenida
                            System.out.println("Actual: "+reloj+" Nueva: "+SegundosAHoras(horaRecibida));
                            if(reloj.ClockInSeconds() <= horaRecibida){ //si la hora es mayor a la del servidor
                                System.out.println("Sustituyendo hora");
                                reloj.SetClockInSeconds(horaRecibida);//sustituimos por la nueva hora
                            }else{ //si la hora es menor a la del servidor
                                int tiempoEspera = (reloj.ClockInSeconds()-horaRecibida)*1000;
                                System.out.println("Esperando "+tiempoEspera+" segundos");
                                reloj.Esperar(tiempoEspera);
                            }   break;
                        case Servidor.DETENER_RELOJ:
                            System.out.println("Deteniendo Reloj");
                            reloj.Stop();
                            break;
                        case Servidor.REANUDAR_RELOJ:
                            System.out.println("Reanudando reloj");
                            reloj.SetClockInSeconds(input.readInt());
                            reloj.Start();
                            System.out.println("Reloj ready");
                            break;
                        default:
                            break;
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Servidor.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
        peticiones.start();
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println("Pedir libro");
        try {
            outputLibro.writeInt(Servidor.PEDIR_LIBRO);//enviamos que tipo de peticion se necesita
            outputLibro.flush();
            System.out.println("Enviada peticion de libro");
            System.out.println("Esperando libro");
            int comando = inputLibro.readInt();
            System.out.println("Libro obtenido");
            if(comando == Servidor.PEDIR_LIBRO){//nos llego un libro
                boolean reiniciar = inputLibro.readBoolean();
                if(reiniciar){
                    //vaciamos lista UI y lista de libros
                    System.out.println("SESION REINICIADA");
                    modelLibros.clear();
                    libros.clear();
                    listaLibros.clearSelection();
                }
                String tituloLibro = inputLibro.readUTF();//obtenemos titulo
                String autorLibro = inputLibro.readUTF();//obtenemos autor
                modelLibros.addElement(tituloLibro);//agregamos a la UI
                libros.add(new Libro(numLibros,tituloLibro,autorLibro,"No portada"));//agregamos a la lista
            }else if(comando == Servidor.REINICIAR_SESION){//si el servidor nos pide reiniciar sesion
                VentanaReiniciar ventana = new VentanaReiniciar(this);
                ventana.setVisible(true);
            }
        } catch (IOException ex) {
            Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Usuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Usuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Usuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Usuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Usuario().setVisible(true);
            }
        });
    }
    
    public void Reiniciar(int opc){
        //vaciamos lista UI y lista de libros
        System.out.println("SESION REINICIADA");
        modelLibros.clear();
        libros.clear();
        listaLibros.clearSelection();
        try {
            //enviamos al servidor libro la opcion seleccionada
            outputLibro.writeInt(opc);
        } catch (IOException ex) {
            Logger.getLogger(Usuario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private String SegundosAHoras(int segundos){
        return (segundos/3600)+":"+((segundos%3600)/60)+":"+((segundos%3600)%60);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelAutor;
    private javax.swing.JLabel labelReloj;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JList<String> listaLibros;
    // End of variables declaration//GEN-END:variables
}
